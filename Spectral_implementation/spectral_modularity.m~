function [grp_cell, grp_size] = spectral_modularity(K, lambda, distanceMat)
    
    degree_vect = sum(distanceMat,2);
    degree_mat = degree_vect * degree_vect';
    m = sum(sum(distanceMat))/2;
    data_len = size(distanceMat, 1);
    Mat = distanceMat - degree_mat/(2*m) - lambda*ones(data_len);
    tic
    fprintf('Eigen Decomposition Initiated\n')
    [Evec, ~] = eig(Mat);
    fprintf('Eigen Decomposition completed\n')
    toc
    
    D = zeros(data_len, K);
    
    fprintf('Selecting eigen vectors for K-Means\n')
    eig_vect_cnt=1;
    for i=1:K
        eig_vec = Evec(:, eig_vect_cnt);
        while( (sum(eig_vec>=0) == 0 || sum(eig_vec<0) == 0) )
            data_len = eig_vect_cnt+1;
            eig_vec = Evec(:, data_len);
        end
        D(:, i) = eig_vec;
        data_len = data_len-1;
    end
    
    fprintf('Eigen Vectors for KMeans has been selected\n\n')
    
    tic
    fprintf('Performing Kmeans Clustering\n')    
    IDX = kmeans(D, K);
    fprintf('Kmeans Clustering completed\n')
    toc
    grp_cell = cell(K,1);
    grp_size = zeros(K,1);
    
    for i=1:K
        grp_cell{i} = find(IDX==i);
        grp_size(i) = length(grp_cell{i});
    end
   i; 
end
